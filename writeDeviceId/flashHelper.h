// flashHelper.h

#ifndef  FLASH_HELPER_H
#define  FLASH_HELPER_H

/*************************************************************************************** 
   Do NOT edit this file unless absolutely required !!!
   If edited, it requires matching changes in all the dependent projects which use OTA. 
   While uploading code, use Tools/Erase Flash/ Only Sketch option
****************************************************************************************/

#include <EEPROM.h>

// Three copies of the data structure DeviceIdentifier are stored
// Each data block is 100 bytes long: 
// A block contains 4 int/long variables and a 64 byte string
// First copy starts at address: 10 (decimal)
// The next 2 copies are at 110 and 210 (all decimal)

#define MAGIC_NUMBER        0x55aa
#define RESERVED            0xABCD

#define BLOCK_ADDRESS1      10
#define BLOCK_ADDRESS2      110
#define BLOCK_ADDRESS3      210

#define TOTAL_ALLOC_SIZE    300
#define MAX_STRING_SIZE     64

// the DeviceIdentifier structure is 80 bytes in size
// long type is 4 bytes

struct StorageBlock {
  long  magic_number;  // to verify data integrity
  long  device_id;
  long  group_id;
  long  reserved;      // for future use
  char  firmware_server_URL[MAX_STRING_SIZE];  
};

struct DeviceIdentifier {
  bool  is_corrupted;
  long  device_id;
  long  group_id;
  char  firmware_server_URL[MAX_STRING_SIZE];  
};

class FlashHelper {
  public:
    void begin();
    void commit();
    void end();
    bool testMemory();
    bool writeBlocks (DeviceIdentifier ident);
    void readBlocks  (DeviceIdentifier& ident);
  private:
    /* Returns true if the block is CORRUPTED, and false if the data is good */
    bool readBlock (int block_addr, DeviceIdentifier& ident);
};

#endif
